import TelegramBot, { Message } from 'node-telegram-bot-api';
import { User, AppConfig, UserConfig, Subnet, CallbackButton } from '$/db/types';
import { logActivity } from '$/utils/logger';
import { generateMonthlyUsageChart, generateTopUsersChart } from '$/utils/chart';
import { getUsageText } from '$/utils/text';
import { sourceEval } from '$/utils/ips';
import { devices } from '$/bot';
import * as db from '$/db';

import * as userFlow from '$/handlers/user_flow';
import * as wgAPI from '$/api/wg_easy_api';

let botInstance: TelegramBot;
let appConfigInstance: AppConfig;

export function initAdminFlow(bot: TelegramBot, appCfg: AppConfig) {
    botInstance = bot;
    appConfigInstance = appCfg;
}

export async function showAdminMainMenu(chatId: number, messageId: number) {
    const inline_keyboard: CallbackButton[][] = [
        [{ text: "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data: "admin_list_users_page_0" },
        { text: "‚öôÔ∏è –í—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data: "admin_list_all_configs_page_0" }],
        [{ text: "üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤", callback_data: "admin_view_logs" },
        { text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "admin_show_stats" }],
        [{ text: "üìå –°–ø–∏—Å–∫–∏ IP", callback_data: "admin_subnets_0" }],
        [{ text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "user_main_menu" }],
    ];
    try {
        await botInstance.editMessageCaption("üëë <b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", {
            chat_id: chatId, message_id: messageId,
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard
            }
        });
    } catch (e) {
        await botInstance.editMessageText("üëë <b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n–û—Ç—Å—é–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º!", {
            chat_id: chatId, message_id: messageId,
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard
            }
        });
    }
}

export async function handleApproveAccess(adminChatId: number, userIdToApprove: number, originalMsgId?: number) {
    const user = db.ensureUser(userIdToApprove);
    user.hasAccess = true;
    user.accessGrantedAt = new Date().toISOString();
    db.updateUser(userIdToApprove, { hasAccess: true, accessGrantedAt: user.accessGrantedAt });

    const request = db.getAccessRequest(userIdToApprove);
    const userIdentifier = user.username ? `@${user.username}` : `ID ${userIdToApprove}`;

    db.removeAccessRequest(userIdToApprove);

    await botInstance.sendMessage(userIdToApprove, "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ–¥–æ–±—Ä–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.");
    logActivity(`Admin approved access for user ${userIdToApprove}.`);

    const approvalText = `‚úÖ –î–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userIdentifier} (ID: ${userIdToApprove}) –æ–¥–æ–±—Ä–µ–Ω.`;
    if (originalMsgId && request?.adminMessageId === originalMsgId) {
        try {
            await botInstance.editMessageText(
                `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userIdentifier} (ID: ${userIdToApprove}) –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.\n\n${approvalText}`,
                {
                    chat_id: adminChatId,
                    message_id: originalMsgId,
                    reply_markup: { inline_keyboard: [] }
                }
            );
        } catch (e) {
            console.error("Failed to edit admin message for approval:", e);
            await botInstance.sendMessage(adminChatId, approvalText);
        }
    } else {
        await botInstance.sendMessage(adminChatId, approvalText);
    }
}

export async function handleDenyAccess(adminChatId: number, userIdToDeny: number, originalMsgId?: number) {
    const user = db.getUser(userIdToDeny);
    const request = db.getAccessRequest(userIdToDeny);
    const userIdentifier = user?.username || request?.username || `ID ${userIdToDeny}`;

    db.removeAccessRequest(userIdToDeny);

    await botInstance.sendMessage(userIdToDeny, "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–∑–∂–µ.");
    logActivity(`Admin denied access for user ${userIdToDeny}.`);

    const denialText = `‚ùå –î–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userIdentifier} (ID: ${userIdToDeny}) –æ—Ç–∫–ª–æ–Ω–µ–Ω.`;
    if (originalMsgId && request?.adminMessageId === originalMsgId) {
        try {
            await botInstance.editMessageText(
                `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userIdentifier} (ID: ${userIdToDeny}) –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.\n\n${denialText}`,
                {
                    chat_id: adminChatId,
                    message_id: originalMsgId,
                    reply_markup: { inline_keyboard: [] }
                }
            );
        } catch (e) {
            console.error("Failed to edit admin message for denial:", e);
            await botInstance.sendMessage(adminChatId, denialText);
        }
    } else {
        await botInstance.sendMessage(adminChatId, denialText);
    }
}

export async function handleAdminListUsers(chatId: number, page: number) {
    const usersWithAccess = db.getAllUsersWithAccess().filter(u => !appConfigInstance.adminTelegramIds.includes(u.id));
    const ITEMS_PER_PAGE = 10;

    if (usersWithAccess.length === 0) {
        await botInstance.sendMessage(chatId, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º (–∫—Ä–æ–º–µ –≤–∞—Å).", {
            reply_markup: {
                inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data: "admin_main_menu" }]]
            }
        });
        return;
    }

    const totalPages = Math.ceil(usersWithAccess.length / ITEMS_PER_PAGE);
    const currentPage = Math.max(0, Math.min(page, totalPages - 1));

    const startIndex = currentPage * ITEMS_PER_PAGE;
    const pageUsers = usersWithAccess.slice(startIndex, startIndex + ITEMS_PER_PAGE);

    let messageText = `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º (–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage + 1}/${totalPages}):\n`;
    const inline_keyboard: TelegramBot.InlineKeyboardButton[][] = [];

    if (pageUsers.length === 0 && currentPage > 0) {
        messageText = "–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í–æ–∑–º–æ–∂–Ω–æ, —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è.";
    } else {
        pageUsers.forEach(user => {
            const userIdentifier = user.username ? `@${user.username}` : `ID: ${user.id}`;
            inline_keyboard.push([{ text: userIdentifier, callback_data: `admin_view_user_${user.id}` }]);
        });
    }

    const paginationButtons: TelegramBot.InlineKeyboardButton[] = [];
    if (currentPage > 0) {
        paginationButtons.push({ text: "‚¨ÖÔ∏è", callback_data: `admin_list_users_page_${currentPage - 1}` });
    }
    if (totalPages > 1) {
        paginationButtons.push({ text: `${currentPage + 1}/${totalPages}`, callback_data: "noop" });
    }
    if (currentPage < totalPages - 1) {
        paginationButtons.push({ text: "‚û°Ô∏è", callback_data: `admin_list_users_page_${currentPage + 1}` });
    }

    if (paginationButtons.length > 0) {
        inline_keyboard.push(paginationButtons);
    }
    inline_keyboard.push([{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data: "admin_main_menu" }]);

    const adminState = db.getUser(chatId)?.state;
    if (adminState && adminState.action === 'admin_viewing_users' && adminState.data?.messageId) {
        try {
            await botInstance.editMessageText(messageText, {
                chat_id: chatId,
                message_id: adminState.data.messageId,
                reply_markup: { inline_keyboard }
            });
        } catch (e) {
            const sentMessage = await botInstance.sendMessage(chatId, messageText, { reply_markup: { inline_keyboard } });
            db.updateUser(chatId, { state: { action: 'admin_viewing_users', data: { messageId: sentMessage.message_id } } });
        }
    } else {
        const sentMessage = await botInstance.sendMessage(chatId, messageText, { reply_markup: { inline_keyboard } });
        db.updateUser(chatId, { state: { action: 'admin_viewing_users', data: { messageId: sentMessage.message_id } } });
    }
    logActivity(`Admin ${chatId} requested user list (page ${page}) - WIP`);
}

export async function handleSubnetList(chatId: number, messageId: number, page: number) {
    const subnets = db.getSubnets();
    const ITEMS_PER_PAGE = 10;

    const totalPages = Math.ceil(Object.keys(subnets).length / ITEMS_PER_PAGE);
    const currentPage = Math.max(0, Math.min(page, totalPages - 1));
    
    const startIndex = currentPage * ITEMS_PER_PAGE;
    const pageIps = Object.entries(subnets).slice(startIndex, startIndex + ITEMS_PER_PAGE);
    
    let messageText = `üìå –°–ø–∏—Å–∫–∏ IP (–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage + 1}/${totalPages}):\n`;
    const inline_keyboard: TelegramBot.InlineKeyboardButton[][] = [];

    if (pageIps.length === 0 && currentPage > 0) {
        messageText = "–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ—Ö–æ–∂–µ, —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è.";
    } else {
        pageIps.forEach(([ subnetId, subnet ]) => {
            const text = `${subnetId}. ${subnet.name} (${subnet.ips ? (subnet.ips.length + " IP") : "–∏—Å—Ç–æ—á–Ω–∏–∫"})`
            inline_keyboard.push([{ text, callback_data: `admin_subnet_${subnetId}` }]);
        });
    }

    const paginationButtons: TelegramBot.InlineKeyboardButton[] = [];
    if (currentPage > 0) {
        paginationButtons.push({ text: "‚¨ÖÔ∏è", callback_data: `admin_subnets_${currentPage - 1}` });
    }
    if (totalPages > 1) {
        paginationButtons.push({ text: `${currentPage + 1}/${totalPages}`, callback_data: "noop" });
    }
    if (currentPage < totalPages - 1) {
        paginationButtons.push({ text: "‚û°Ô∏è", callback_data: `admin_subnets_${currentPage + 1}` });
    }

    if (paginationButtons.length > 0) {
        inline_keyboard.push(paginationButtons);
    }
    
    inline_keyboard.push([
        { text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data: "admin_create_subnet" },
        { text: "‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data: "admin_delete_subnet" },
    ]);
    inline_keyboard.push([{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data: "admin_main_menu" }]);
    
    await botInstance.editMessageCaption(messageText, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: { inline_keyboard }
    });
    
    logActivity(`Admin ${chatId} requested ip subnets list (page ${page})`);
}

export async function handleSubnetCreation(chatId: number, userId: number, messageId: number) {
    const user = db.getUser(userId);
    
    const inline_keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data: "admin_main_menu" }]
    ];
    
    const text = `üìå –ù–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ IP –≤ –≤–∏–¥–µ:\nName: –Ω–∞–∑–≤–∞–Ω–∏–µ\nList: —Å–ø–∏—Å–æ–∫ IP —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n<b>–ò–õ–ò</b>\nSource: —Ñ—É–Ω–∫—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞`
    const reply = await botInstance.editMessageCaption(text, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard }
    });
    
    db.updateUser(chatId, { state: { action: 'admin_subnet_creation', messageId: (reply as Message).message_id }})
    
    logActivity(`Admin ${chatId} started config creation`);
}

export async function handleSubnetCreationText(userId: number, input: string) {
    const user = db.getUser(userId);
    
    const args = input.split('\n');
    
    const name   = args.find(x => x.startsWith('Name: '))?.slice('Name: '.length);
    const ips    = args.find(x => x.startsWith('List: '))?.slice('List: '.length)?.split(',')?.map(x => x.trim());
    const source = args.find(x => x.startsWith('Source: '))?.slice('Source: '.length);
    
    if (!name) return await botInstance.sendMessage(userId, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∏–º—è —Å–ø–∏—Å–∫–∞ (Name: )");
    else if (name.length < 4 || name.length > 20)
               return await botInstance.sendMessage(userId, "–ò–º—è —Å–ø–∏—Å–∫–∞ –Ω–µ –≤–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 4 - 20 —Å–∏–º–≤–æ–ª–æ–≤.");
    if (!ips && !source) return await botInstance.sendMessage(userId, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫.");
    
    const subnets = db.getSubnets();
    const keys = Object.keys(subnets);
    const latestIdx: number = +keys[keys.length - 1];
    subnets[latestIdx + 1] = {
        name,
        creator: userId,
        createdAt: Date.now(),
        ...(ips ? { ips } : {}),
        ...(source ? { source } : {}),
    }
    
    if (user?.state?.messageId)
        botInstance.deleteMessage(userId, user.state.messageId);
    await botInstance.sendMessage(userId, `–°–ø–∏—Å–æ–∫ IP —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.`);
    
    db.updateUser(userId, { state: undefined });
    
    logActivity(`Admin ${userId} finished config creation`);
}

export async function handleSubnetDeletion(chatId: number, userId: number, messageId: number) {
    const user = db.getUser(userId);
    
    const inline_keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data: "admin_main_menu" }]
    ];
    
    const text = `üìå –ù–∞–ø–∏—à–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ø–∏—Å–∫–∞ IP –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`
    const reply = await botInstance.editMessageCaption(text, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard }
    });
    
    db.updateUser(chatId, { state: { action: 'admin_subnet_deletion', messageId: (reply as Message).message_id }})
    
    logActivity(`Admin ${chatId} started config deletion`);
}

export async function handleSubnetDeletionText(userId: number, input: string) {
    const user = db.getUser(userId);
    
    const subnets: Record<string, Subnet> = db.getSubnets();
    
    const subnet = subnets[input];
    if (!subnet) return await botInstance.sendMessage(userId, "–°–ø–∏—Å–æ–∫ IP —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    
    delete subnets[input];
    
    if (user?.state?.messageId)
        botInstance.deleteMessage(userId, user.state.messageId);
    await botInstance.sendMessage(userId, `–°–ø–∏—Å–æ–∫ IP —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`);
    
    db.updateUser(userId, { state: undefined });
    
    logActivity(`Admin ${userId} finished config deletion`);
}

export async function handleSubnetInfo(userId: number, id: number) {
    //const user = db.getUser(userId);
    
    const subnets: Record<string, Subnet> = db.getSubnets();
    
    const subnet = subnets[id];
    if (!subnet) return await botInstance.sendMessage(userId, "–°–ø–∏—Å–æ–∫ IP —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    
    try {
        let ips = [];
        if (subnet.ips?.length) ips = subnet.ips;
        else if (subnet.source) {
            ips = await sourceEval(subnet.source);
        }
        
        console.log(ips)
        
        await botInstance.sendMessage(userId, `–°–ø–∏—Å–æ–∫ IP: ${ips.join(', ')}` + (subnet.source ? `\n–§—É–Ω–∫—Ü–∏—è: ${subnet.source}` : ''));
        
        logActivity(`Admin ${userId} finished config deletion`);
    } catch (e) {
        console.log("–û—à–∏–±–∫–∞!", e)
        await botInstance.sendMessage(userId, `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ IP!`);
    }
}

export async function handleAdminListAllConfigs(chatId: number, page: number) {
    const allConfigsWithOwners = db.getAllConfigs();
    const ITEMS_PER_PAGE = 10;

    if (allConfigsWithOwners.length === 0) {
        await botInstance.sendMessage(chatId, "–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.", {
            reply_markup: {
                inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data: "admin_main_menu" }]]
            }
        });
        return;
    }
    const totalPages = Math.ceil(allConfigsWithOwners.length / ITEMS_PER_PAGE);
    const currentPage = Math.max(0, Math.min(page, totalPages - 1));

    const startIndex = currentPage * ITEMS_PER_PAGE;
    const pageConfigs = allConfigsWithOwners.slice(startIndex, startIndex + ITEMS_PER_PAGE);

    let messageText = `‚öôÔ∏è –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage + 1}/${totalPages}):\n`;
    const inline_keyboard: TelegramBot.InlineKeyboardButton[][] = [];

    pageConfigs.forEach((config, indexOnPage) => {
        const globalIndex = startIndex + indexOnPage;
        const ownerIdentifier = config.ownerUsername ? `@${config.ownerUsername}` : `ID: ${config.ownerId}`;
        const totalTraffic = (config.totalTx || 0) + (config.totalRx || 0);
        const statusIcon = config.isEnabled ? '‚úÖ' : '‚ùå';

        messageText += `\n${statusIcon} <b>"${config.userGivenName}"</b> (–æ—Ç ${ownerIdentifier}, —Ç—Ä–∞—Ñ–∏–∫: ${getUsageText(totalTraffic)})`;
        inline_keyboard.push([{ text: `"${config.userGivenName}" –æ—Ç ${ownerIdentifier}`, callback_data: `admin_view_cfg_idx_${globalIndex}` }]);
    });

    const paginationButtons: TelegramBot.InlineKeyboardButton[] = [];
    if (currentPage > 0) {
        paginationButtons.push({ text: "‚¨ÖÔ∏è", callback_data: `admin_list_all_configs_page_${currentPage - 1}` });
    }
    if (totalPages > 1) {
        paginationButtons.push({ text: `${currentPage + 1}/${totalPages}`, callback_data: "noop" });
    }
    if (currentPage < totalPages - 1) {
        paginationButtons.push({ text: "‚û°Ô∏è", callback_data: `admin_list_all_configs_page_${currentPage + 1}` });
    }

    if (paginationButtons.length > 0) {
        inline_keyboard.push(paginationButtons);
    }
    inline_keyboard.push([{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data: "admin_main_menu" }]);

    const adminState = db.getUser(chatId)?.state;
    if (adminState && adminState.action === 'admin_viewing_all_configs' && adminState.data?.messageId) {
        try {
            await botInstance.editMessageText(messageText, {
                chat_id: chatId,
                parse_mode: 'HTML',
                message_id: adminState.data.messageId,
                reply_markup: { inline_keyboard }
            });
        } catch (e) {
            const sentMessage = await botInstance.sendMessage(chatId, messageText, { reply_markup: { inline_keyboard }, parse_mode: 'HTML' });
            db.updateUser(chatId, { state: { action: 'admin_viewing_all_configs', data: { messageId: sentMessage.message_id } } });
        }
    } else {
        const sentMessage = await botInstance.sendMessage(chatId, messageText, { reply_markup: { inline_keyboard }, parse_mode: 'HTML' });
        db.updateUser(chatId, { state: { action: 'admin_viewing_all_configs', data: { messageId: sentMessage.message_id } } });
    }

    logActivity(`Admin ${chatId} requested all configs list (page ${page}) - WIP`);
}

export async function handleAdminViewLogs(chatId: number) {
    try {
        const logContent = await Bun.file('data/activity.log').text();
        const lines = logContent.split('\n').filter((line: string) => line.trim() !== '');
        const lastNLines = lines.slice(-20).join('\n');
        if (lastNLines) {
            await botInstance.sendMessage(chatId, `–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n\`\`\`\n${lastNLines}\n\`\`\``, {
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data: "admin_main_menu" }]] }
            });
        } else {
            await botInstance.sendMessage(chatId, "–§–∞–π–ª –ª–æ–≥–æ–≤ –ø—É—Å—Ç.", {
                reply_markup: { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data: "admin_main_menu" }]] }
            });
        }
    } catch (error) {
        await botInstance.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –ª–æ–≥–æ–≤.");
        logActivity(`Admin ${chatId} failed to read logs: ${error}`);
    }
    logActivity(`Admin ${chatId} requested logs view - WIP`);
}

export async function handleAdminShowUsageStats(chatId: number) {
    const placeholder = await botInstance.sendMessage(chatId, "üìä –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º...");

    try {
        const allConfigs = db.getAllConfigs();

        if (allConfigs.length === 0) {
            await botInstance.editMessageText("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", {
                chat_id: chatId,
                message_id: placeholder.message_id,
                reply_markup: { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data: "admin_main_menu" }]] }
            });
            return;
        }

        const configUsage = allConfigs.map(config => {
            const totalUsage = (config.totalRx || 0) + (config.totalTx || 0);
            const ownerIdentifier = config.ownerUsername ? `@${config.ownerUsername}` : `ID ${config.ownerId}`;
            return {
                name: `"${config.userGivenName}" –æ—Ç ${ownerIdentifier}`,
                usage: totalUsage,
            };
        }).sort((a, b) => b.usage - a.usage);

        const chartImageBuffer = await generateTopUsersChart(configUsage);

        await botInstance.sendPhoto(chatId, chartImageBuffer, {
            caption: 'üìä <b>–¢–æ–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ –æ–±—â–µ–º—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é —Ç—Ä–∞—Ñ–∏–∫–∞</b>',
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{ text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data: "admin_show_usage_stats" }],
                    [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data: "admin_main_menu" }]
                ]
            }
        });
        await botInstance.deleteMessage(chatId, placeholder.message_id);
        logActivity(`Admin ${chatId} viewed config usage stats chart.`);
    } catch (error) {
        console.error("Failed to generate or send config usage chart:", error);
        logActivity(`Failed to generate or send config usage chart for admin ${chatId}: ${error}`);
        await botInstance.editMessageText("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", { chat_id: chatId, message_id: placeholder.message_id });
    }
}

export async function handleAdminViewUser(chatId: number, userIdToView: number) {
    const user = db.getUser(userIdToView);

    if (!user) {
        await botInstance.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", {
            reply_markup: { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data: "admin_list_users_page_0" }]] }
        });
        return;
    }

    let messageText = `‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n`;
    messageText += `ID: ${user.id}\n`;
    messageText += `Username: ${user.username || "–ù–µ —É–∫–∞–∑–∞–Ω"}\n`;
    messageText += `–î–æ—Å—Ç—É–ø –ø–æ–ª—É—á–µ–Ω: ${user.accessGrantedAt ? new Date(user.accessGrantedAt).toLocaleString('ru-RU') : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n`;
    messageText += `–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (${user.configs.length} —à—Ç.):\n`;

    if (user.configs.length > 0) {
        user.configs.forEach(config => {
            const totalTx = config.totalTx || 0;
            const totalRx = config.totalRx || 0;
            const statusIcon = config.isEnabled ? '‚úÖ' : '‚ùå';
            messageText += `  ${statusIcon} "${config.userGivenName}" (—Å–∫–∞—á–∞–Ω–æ: ${getUsageText(totalTx)}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${getUsageText(totalRx)})\n`;
        });
    } else {
        messageText += `  –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.\n`;
    }

    const inline_keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [{ text: "üö´ –û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø", callback_data: `admin_revoke_access_ask_${user.id}` }],
        [{ text: "‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data: "admin_list_users_page_0" }],
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data: "admin_main_menu" }]
    ];

    await botInstance.sendMessage(chatId, messageText, { reply_markup: { inline_keyboard } });
    logActivity(`Admin ${chatId} viewed details for user ${userIdToView}`);
}

export async function handleAdminRevokeAccessAsk(chatId: number, userIdToRevoke: number) {
    const user = db.getUser(userIdToRevoke);
    if (!user) {
        await botInstance.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }
    const userIdentifier = user.username ? `@${user.username}` : `ID ${user.id}`;
    await botInstance.sendMessage(chatId, `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userIdentifier}? –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏. –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è, –Ω–æ –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –∏–º–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞.`, {
        reply_markup: {
            inline_keyboard: [
                [{ text: "üö´ –î–∞, –æ—Ç–æ–∑–≤–∞—Ç—å", callback_data: `admin_revoke_access_confirm_${userIdToRevoke}` }],
                [{ text: "‚¨ÖÔ∏è –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data: `admin_view_user_${userIdToRevoke}` }]
            ]
        }
    });
}

export async function handleAdminRevokeAccessConfirm(adminChatId: number, userIdToRevoke: number) {
    const user = db.getUser(userIdToRevoke);
    if (!user) {
        await botInstance.sendMessage(adminChatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }

    db.updateUser(userIdToRevoke, { hasAccess: false });
    const userIdentifier = user.username ? `@${user.username}` : `ID ${user.id}`;
    logActivity(`Admin ${adminChatId} revoked access for user ${userIdToRevoke} (${userIdentifier})`);

    await botInstance.sendMessage(adminChatId, `–î–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userIdentifier} –æ—Ç–æ–∑–≤–∞–Ω.`);
    try {
        await botInstance.sendMessage(userIdToRevoke, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–æ–∑–≤–∞–ª –≤–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É. –í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.");
    } catch (e: any) {
        logActivity(`Failed to notify user ${userIdToRevoke} about access revocation: ${e.message}`);
    }
    await handleAdminListUsers(adminChatId, 0);
}


export async function handleAdminViewConfig(adminChatId: number, ownerId: number, messageId: number | undefined, wgEasyClientId: string) {
    const placeholderMessage = await botInstance.sendMessage(adminChatId, `üëë –ê–¥–º–∏–Ω: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Ñ–∏–≥–∞...`);

    try {
        const owner = db.getUser(ownerId);
        if (!owner) {
            await botInstance.editMessageText("–í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", { chat_id: adminChatId, message_id: placeholderMessage.message_id });
            return;
        }
        const config = owner.configs.find(c => c.wgEasyClientId === wgEasyClientId);
        if (!config) {
            await botInstance.editMessageText("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞.", { chat_id: adminChatId, message_id: placeholderMessage.message_id });
            return;
        }

        const deviceName = devices.find(d => d.id === config.deviceId)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
        const creationDate = new Date(config.createdAt).toLocaleString('ru-RU');
        const ownerIdentifier = owner.username ? `@${owner.username}` : `ID ${owner.id}`;

        let text = `üëë <b>–ê–¥–º–∏–Ω: –î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n`;
        text += `<b>–ò–º—è:</b> "${config.userGivenName}"\n`;
        text += `<b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> ${ownerIdentifier} (ID: ${ownerId})\n`;
        text += `<b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> ${deviceName} (ID: ${config.deviceId})\n`;
        text += `<b>–°–æ–∑–¥–∞–Ω:</b> ${creationDate}\n`;
        text += `<b>–°—Ç–∞—Ç—É—Å:</b> ${config.isEnabled ? "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"}\n`;

        const totalTx = config.totalTx || 0;
        const totalRx = config.totalRx || 0;
        const bandwidth = `${getUsageText(totalTx)} —Å–∫–∞—á–∞–Ω–æ, ${getUsageText(totalRx)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`;
        text += `<b>–¢—Ä–∞—Ñ–∏–∫:</b> ${bandwidth}\n\n`;

        text += `<b>–ö–ª–∏–µ–Ω—Ç ID (wg-easy):</b> ${config.wgEasyClientId}`;

        const chartImageBuffer = await generateMonthlyUsageChart(config.dailyUsage);

        const allConfigs = db.getAllConfigs();
        const globalConfigIndex = allConfigs.findIndex(c => c.ownerId === ownerId && c.wgEasyClientId === wgEasyClientId);
        if (globalConfigIndex === -1) {
            await botInstance.sendMessage(adminChatId, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.");
            return;
        }

        const inline_keyboard: TelegramBot.InlineKeyboardButton[][] = [
            [
                { text: "üì• –°–∫–∞—á–∞—Ç—å (.conf)", callback_data: `admin_dl_config_${ownerId}_${wgEasyClientId}` },
                { text: "üì± QR-–∫–æ–¥", callback_data: `admin_qr_config_${ownerId}_${wgEasyClientId}` }
            ],
            [
                config.isEnabled
                    ? { text: "üö´ –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data: `admin_disable_cfg_idx_${globalConfigIndex}` }
                    : { text: "‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å", callback_data: `admin_enable_cfg_idx_${globalConfigIndex}` }
            ],
            [
                { text: "üóë –£–¥–∞–ª–∏—Ç—å (–ê–¥–º–∏–Ω)", callback_data: `admin_delete_cfg_ask_idx_${globalConfigIndex}` }
            ],
            [
                { text: "‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤", callback_data: `admin_list_all_configs_page_0` }
            ]
        ];

        await botInstance.sendPhoto(adminChatId, chartImageBuffer, {
            caption: text,
            parse_mode: 'HTML',
            reply_markup: { inline_keyboard }
        });
        await botInstance.deleteMessage(adminChatId, placeholderMessage.message_id);
    } catch (error) {
        console.error(`Admin failed to show config details with chart for ${wgEasyClientId}:`, error);
        logActivity(`Admin failed to show config details with chart for ${wgEasyClientId}: ${error}`);
        await botInstance.editMessageText(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º.`, {
            chat_id: adminChatId,
            message_id: placeholderMessage.message_id,
        });
    }
}

// –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ, QR, –≤–∫–ª/–≤—ã–∫–ª, —É–¥–∞–ª–µ–Ω–∏–µ)
// –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏ –Ω–∞ userFlow.handleConfigAction, –Ω–æ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º 'admin_'
// –∏ –±—É–¥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å ownerId.
// userFlow.handleConfigAction, –≤—ã–∑—ã–≤–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ wgAPI —Ñ—É–Ω–∫—Ü–∏–∏
// –∏ –æ–±–Ω–æ–≤–ª—è—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –≤ db.updateUser(ownerId, ...).

export async function handleAdminConfigAction(adminChatId: number, actionWithPrefix: string, configIdentifier: string) {
    const allConfigs = db.getAllConfigs();
    let ownerId: number;
    let wgEasyClientId: string;
    let configIndexInDb: number;
    let owner: User | undefined;
    let config: UserConfig | undefined;

    const action = actionWithPrefix.replace('admin_', '').replace(/_cfg_idx$/, ''); // e.g. dl_config, disable, delete_ask

    if (actionWithPrefix.includes('_cfg_idx_')) {
        const globalIndex = parseInt(configIdentifier);
        if (isNaN(globalIndex) || globalIndex < 0 || globalIndex >= allConfigs.length) {
            await botInstance.sendMessage(adminChatId, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.");
            return;
        }
        const targetFullConfig = allConfigs[globalIndex];
        ownerId = targetFullConfig.ownerId;
        wgEasyClientId = targetFullConfig.wgEasyClientId;
        owner = db.getUser(ownerId);
        if (!owner) { await botInstance.sendMessage(adminChatId, "–í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."); return; }
        configIndexInDb = owner.configs.findIndex(c => c.wgEasyClientId === wgEasyClientId);
        if (configIndexInDb === -1) { await botInstance.sendMessage(adminChatId, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞."); return; }
        config = owner.configs[configIndexInDb];
    } else {
        const parts = configIdentifier.split('_');
        ownerId = parseInt(parts[0]);
        wgEasyClientId = parts[1];
        owner = db.getUser(ownerId);
        if (!owner) { await botInstance.sendMessage(adminChatId, "–í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."); return; }
        configIndexInDb = owner.configs.findIndex(c => c.wgEasyClientId === wgEasyClientId);
        if (configIndexInDb === -1) { await botInstance.sendMessage(adminChatId, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞."); return; }
        config = owner.configs[configIndexInDb];
    }

    if (!owner || !config) return;

    logActivity(`Admin ${adminChatId} performing action '${action}' on config ${wgEasyClientId} of user ${ownerId}`);

    // –ü—Ä–∏–º–µ—Ä –¥–ª—è disable:
    if (action === 'disable') {
        if (await wgAPI.disableWgClient(wgEasyClientId)) {
            owner.configs[configIndexInDb].isEnabled = false;
            db.updateUser(ownerId, { configs: owner.configs });
            logActivity(`Admin ${adminChatId} disabled config ${wgEasyClientId} for user ${ownerId}`);
            await handleAdminViewConfig(adminChatId, ownerId, undefined, wgEasyClientId);
        } else {
            await botInstance.sendMessage(adminChatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ API.");
        }
        return;
    }

    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: enable, delete_ask, delete_confirm, dl_config, qr_config
    // dl_config –∏ qr_config –±—É–¥—É—Ç –ø–æ—Ö–æ–∂–∏ –Ω–∞ userFlow, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—è —Ñ–∞–π–ª—ã –∞–¥–º–∏–Ω—É.
    // delete_ask –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å callback_data `admin_delete_cfg_confirm_idx_${globalIndex}`
    // delete_confirm –¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å –∏–∑ wgAPI –∏ –∏–∑ db, –∑–∞—Ç–µ–º –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤.

    await botInstance.sendMessage(adminChatId, `–î–µ–π—Å—Ç–≤–∏–µ '${action}' –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞ ${wgEasyClientId} (–≤–ª–∞–¥–µ–ª–µ—Ü ${ownerId}) –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`);
}
