import TelegramBot from 'node-telegram-bot-api';
import { User, Device, AppConfig } from '../types';
import * as db from '../db';
import * as wgAPI from '../wg_easy_api';
import { getWgConnectionInfo } from '../connections';
import { logActivity } from '../logger';

let botInstance: TelegramBot;
let devices: Device[];
let appConfigInstance: AppConfig;

export function initUserFlow(bot: TelegramBot, loadedDevices: Device[], appCfg: AppConfig) {
    botInstance = bot;
    devices = loadedDevices;
    appConfigInstance = appCfg;
}

export async function handleStart(msg: TelegramBot.Message) {
    const chatId = msg.chat.id;
    const userId = msg.from!.id;
    const username = msg.from?.username || `${msg.from?.first_name} ${msg.from?.last_name || ''}`.trim();

    const user = db.ensureUser(userId, username);

    if (userId === appConfigInstance.adminTelegramId) {
        if (!user.hasAccess) {
            user.hasAccess = true;
            user.accessGrantedAt = new Date().toISOString();
            db.updateUser(userId, { hasAccess: true, accessGrantedAt: user.accessGrantedAt });
            logActivity(`Admin ${userId} (${username}) started the bot. Access granted/confirmed.`);
        }
    }

    if (user.hasAccess) {
        await showMainMenu(chatId, userId);
    } else {
        const request = db.getAccessRequest(userId);
        if (request) {
            await botInstance.sendMessage(chatId, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
        } else {
            await botInstance.sendMessage(chatId, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø. –•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É?", {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "‚úÖ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data: `request_access` }]
                    ]
                }
            });
        }
    }
}

export async function showMainMenu(chatId: number, userId: number) {
    db.updateUser(userId, { state: undefined });
    const isAdmin = userId === appConfigInstance.adminTelegramId;

    const keyboard: TelegramBot.KeyboardButton[][] = [
        [{ text: "‚ùì –ü–ª–æ—Ö–æ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN" }],
        [{ text: "üõ° Wireguard" }, { text: "üìÑ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏" }],
    ];

    if (isAdmin) {
        keyboard.push([{ text: "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" }]);
    }

    await botInstance.sendMessage(chatId, "üåü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", {
        reply_markup: {
            keyboard: keyboard,
            resize_keyboard: true,
            one_time_keyboard: false
        }
    });
}

export async function handleRequestAccess(chatId: number, userId: number, username?: string) {
    const adminId = appConfigInstance.adminTelegramId;
    const userIdentifier = username ? `@${username}` : `ID ${userId}`;

    try {
        const adminMessage = await botInstance.sendMessage(adminId,
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userIdentifier} (ID: ${userId}) –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data: `approve_access_${userId}` },
                            { text: "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data: `deny_access_${userId}` }
                        ]
                    ]
                }
            }
        );
        db.addAccessRequest(userId, username, adminMessage.message_id);
        await botInstance.sendMessage(chatId, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.");
        logActivity(`Access request sent to admin for user ${userId} (${username}). Admin msg ID: ${adminMessage.message_id}`);
    } catch (error) {
        console.error("Error sending access request to admin:", error);
        logActivity(`Error sending access request to admin for ${userId}: ${error}`);
        await botInstance.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        if (error.response && error.response.body && error.response.body.description) {
            await botInstance.sendMessage(chatId, `–û—à–∏–±–∫–∞ Telegram: ${error.response.body.description}`);
        }
    }
}

export async function handleCreateWgConfigStart(chatId: number, userId: number) {
    const user = db.ensureUser(userId);
    if (!user.hasAccess) {
        await botInstance.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.");
        return;
    }

    const deviceButtons = devices.map(device => ([{ text: device.name, callback_data: `select_device_${device.id}` }]));

    deviceButtons.push([{ text: "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞ –∏ –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "user_main_menu" }]);

    await botInstance.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", {
        reply_markup: {
            inline_keyboard: deviceButtons,
        }
    });
}

export async function handleDeviceSelection(chatId: number, userId: number, deviceId: string) {
    const device = devices.find(d => d.id === deviceId);
    if (!device) {
        await botInstance.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.");
        return;
    }
    db.updateUser(userId, { state: { action: 'awaiting_config_name', data: { deviceId } } });
    await botInstance.sendMessage(chatId,
        `–í—ã –≤—ã–±—Ä–∞–ª–∏: ${device.name}.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ú–æ–π –Ω–æ—É—Ç–±—É–∫" –∏–ª–∏ "–¢–µ–ª–µ—Ñ–æ–Ω –ú–∞–º—ã").\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel.`,
        {
            reply_markup: {
                inline_keyboard: [[{ text: "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞ –∏ –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "user_main_menu" }]],
                // remove_keyboard: true // –≠—Ç–æ —É–±–µ—Ä–µ—Ç reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
            }
        });
}

export async function handleConfigNameInput(msg: TelegramBot.Message) {
    const chatId = msg.chat.id;
    const userId = msg.from!.id;
    const configName = msg.text;

    if (!configName || configName.trim().length === 0) {
        await botInstance.sendMessage(chatId, "–ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è.");
        return;
    }
    if (configName.length > 50) {
        await botInstance.sendMessage(chatId, "–ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è.");
        return;
    }


    const user = db.getUser(userId);
    if (!user || !user.state || user.state.action !== 'awaiting_config_name' || !user.state.data?.deviceId) {
        await botInstance.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ –≤—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.");
        db.updateUser(userId, { state: undefined });
        return;
    }

    const { deviceId } = user.state.data;
    const wgClientName = `user${userId}_${deviceId}_${Date.now()}`;

    const { message_id: savedMessageId } = await botInstance.sendMessage(chatId, `üîÑ –°–æ–∑–¥–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é "${configName}" –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!`);

    try {
        const newClient = await wgAPI.createWgClient(wgClientName);
        if (!newClient || !newClient.id) {
            await botInstance.editMessageText(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é wg-easy "${configName}"\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ`, {
                chat_id: chatId,
                message_id: savedMessageId
            });
            logActivity(`Failed to create wg-easy client for user ${userId}, name ${wgClientName}`);
            return;
        }

        const userConfig = {
            userGivenName: configName,
            wgEasyClientId: newClient.id,
            deviceId: deviceId,
            createdAt: new Date().toISOString(),
            isEnabled: true,
        };

        user.configs.push(userConfig);
        db.updateUser(userId, { configs: user.configs, state: undefined });

        logActivity(`User ${userId} created config: ${configName} (wgID: ${newClient.id})`);
        await botInstance.editMessageText(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è "${configName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`, {
            chat_id: chatId,
            message_id: savedMessageId
        });

        const configFileContent = await wgAPI.getClientConfiguration(newClient.id);
        if (typeof configFileContent === 'string' && configFileContent.length > 0) {
            await botInstance.sendDocument(chatId, Buffer.from(configFileContent), {
                caption: `üì¶ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è "${configName}"`,
                // @ts-ignore
                contentType: 'text/plain',
            }, {
                filename: `${configName.replace(/\s+/g, '_')}.conf`,
                contentType: 'text/plain',
            });
        } else {
            logActivity(`Failed to get config file content for ${newClient.id} in handleConfigNameInput. Content: ${configFileContent}`);
            await botInstance.sendMessage(chatId, "üì¶ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.");
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ QR-–∫–æ–¥–∞
        const qrCodeBuffer = await wgAPI.getClientQrCodeSvg(newClient.id);
        if (qrCodeBuffer instanceof Buffer && qrCodeBuffer.length > 0) {
            logActivity(`Attempting to send QR code photo (PNG) for ${newClient.id}. Buffer length: ${qrCodeBuffer.length}`);
            await botInstance.sendPhoto(chatId, qrCodeBuffer, {
                caption: `üì∏ QR-–∫–æ–¥ –¥–ª—è "${configName}"`
            });
        } else {
            logActivity(`Failed to get QR code buffer for ${newClient.id} in handleConfigNameInput. Buffer: ${qrCodeBuffer}`);
            await botInstance.sendMessage(chatId, "üì∏ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥.");
        }
        await showMainMenu(chatId, userId);

    } catch (error) {
        console.error("Error in config creation flow:", error);
        logActivity(`Error creating config for user ${userId}: ${error}`);
        await botInstance.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        db.updateUser(userId, { state: undefined });
    }
}


export async function handleListMyConfigs(chatId: number, userId: number, page: number) {
    const user = db.getUser(userId);
    if (!user || !user.hasAccess) {
        await botInstance.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.");
        return;
    }

    const configs = user.configs;
    if (configs.length === 0) {
        await botInstance.sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.", {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data: "create_wg_config_start" }],
                    [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "user_main_menu" }]
                ]
            }
        });
        return;
    }

    const ITEMS_PER_PAGE = 10;
    const totalPages = Math.ceil(configs.length / ITEMS_PER_PAGE);
    const currentPage = Math.max(0, Math.min(page, totalPages - 1));

    const startIndex = currentPage * ITEMS_PER_PAGE;
    const endIndex = startIndex + ITEMS_PER_PAGE;
    const pageConfigs = configs.slice(startIndex, endIndex);

    let messageText = `üìÑ –í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage + 1}/${totalPages}):\n\n`;
    const inline_keyboard: TelegramBot.InlineKeyboardButton[][] = [];
    
    let itemsInCurrentRow = 0;
    let currentRowSymbolsLength = 0;
    let currentRow = [];

    pageConfigs.forEach((config, index) => {
        const globalIndex = startIndex + index;
        const deviceName = devices.find(d => d.id === config.deviceId)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
        messageText += `${globalIndex + 1}. ${config.userGivenName} (${deviceName}) - ${config.isEnabled ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–û—Ç–∫–ª—é—á–µ–Ω"}\n`;
        
        const button = { text: `${config.userGivenName}`, callback_data: `view_config_${config.wgEasyClientId}` }
        const userGivenLength = config.userGivenName.length
        
        if(itemsInCurrentRow === 3 || (currentRowSymbolsLength + userGivenLength) >= 35) {
            inline_keyboard.push(currentRow)
            
            itemsInCurrentRow = 1
            currentRowSymbolsLength = userGivenLength
            currentRow = [ button ]
        }
        else {
            itemsInCurrentRow++
            currentRowSymbolsLength += userGivenLength
            currentRow.push(button)
        }
    });
    
    /* –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É */
    inline_keyboard.push(currentRow)

    const paginationButtons: TelegramBot.InlineKeyboardButton[] = [];
    if (currentPage > 0) {
        paginationButtons.push({ text: "‚¨ÖÔ∏è", callback_data: `list_my_configs_page_${currentPage - 1}` });
    }
    paginationButtons.push({ text: `${currentPage + 1}/${totalPages}`, callback_data: "noop" }); 
                                                                      // noop - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
    if (currentPage < totalPages - 1) {
        paginationButtons.push({ text: "‚û°Ô∏è", callback_data: `list_my_configs_page_${currentPage + 1}` });
    }

    if (paginationButtons.length > 0) {
        inline_keyboard.push(paginationButtons);
    }
    inline_keyboard.push([{ text: "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data: "create_wg_config_start" }]);
    inline_keyboard.push([{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "user_main_menu" }]);


    const userState = user.state;
    if (userState && userState.action === 'viewing_config_list' && userState.data?.messageId) {
        try {
            await botInstance.editMessageText(messageText, {
                chat_id: chatId,
                message_id: userState.data.messageId,
                reply_markup: { inline_keyboard }
            });
        } catch (e) {
            const sentMessage = await botInstance.sendMessage(chatId, messageText, { reply_markup: { inline_keyboard } });
            db.updateUser(userId, { state: { action: 'viewing_config_list', data: { messageId: sentMessage.message_id } } });
        }
    } else {
        const sentMessage = await botInstance.sendMessage(chatId, messageText, { reply_markup: { inline_keyboard } });
        db.updateUser(userId, { state: { action: 'viewing_config_list', data: { messageId: sentMessage.message_id } } });
    }
}

export async function handleViewConfig(chatId: number, userId: number, wgEasyClientId: string) {
    const user = db.getUser(userId);
    if (!user) return;

    const config = user.configs.find(c => c.wgEasyClientId === wgEasyClientId);
    if (!config) {
        await botInstance.sendMessage(chatId, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        await handleListMyConfigs(chatId, userId, 0);
        return;
    }

    const deviceName = devices.find(d => d.id === config.deviceId)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    const creationDate = new Date(config.createdAt).toLocaleString('ru-RU');
    
    const conInfo = getWgConnectionInfo(wgEasyClientId);
    const toMb = b => (b / 1024 / 1024).toFixed(1)
    const bandwidth = !conInfo ? 
                      "–Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏" : 
                      `${toMb(conInfo.transferRx)} —Å–∫–∞—á–∞–Ω–æ, ${toMb(conInfo.transferTx)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`

    let text = `‚ÑπÔ∏è <b>–î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:</b>\n`;
    text += `<b>–ò–º—è:</b> ${config.userGivenName}\n`;
    text += `<b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> ${deviceName}\n`;
    text += `<b>–°–æ–∑–¥–∞–Ω:</b> ${creationDate}\n`;
    text += `<b>–°—Ç–∞—Ç—É—Å:</b> ${config.isEnabled ? "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" : "üö´ –û—Ç–∫–ª—é—á–µ–Ω"}\n`;
    text += `<b>–¢—Ä–∞—Ñ–∏–∫:</b> ${bandwidth}\n`
    text += `<b>ID (wg-easy):</b> <tg-spoiler>${config.wgEasyClientId}</tg-spoiler>`;


    const inline_keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
            { text: "üì• –°–∫–∞—á–∞—Ç—å (.conf)", callback_data: `dl_config_${wgEasyClientId}` },
            { text: "üì± QR-–∫–æ–¥", callback_data: `qr_config_${wgEasyClientId}` }
        ],
        [
            config.isEnabled
                ? { text: "üö´ –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data: `disable_config_${wgEasyClientId}` }
                : { text: "‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å", callback_data: `enable_config_${wgEasyClientId}` }
        ],
        [
            { text: "üóë –£–¥–∞–ª–∏—Ç—å", callback_data: `delete_config_ask_${wgEasyClientId}` }
        ],
        [{ text: "‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∫–æ–Ω—Ñ–∏–≥–æ–≤", callback_data: `list_my_configs_page_0` }],
        [{ text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "user_main_menu" }]
    ];

    await botInstance.sendMessage(chatId, text, { parse_mode: 'HTML', reply_markup: { inline_keyboard } });
}

export async function handleConfigAction(chatId: number, userId: number, action: string, wgEasyClientId: string) {
    const user = db.getUser(userId);
    if (!user) return;

    const configIndex = user.configs.findIndex(c => c.wgEasyClientId === wgEasyClientId);
    if (configIndex === -1) {
        await botInstance.sendMessage(chatId, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        return;
    }
    const config = user.configs[configIndex];

    try {
        switch (action) {
            case 'dl_config':
                const fileContent = await wgAPI.getClientConfiguration(wgEasyClientId);
                if (typeof fileContent === 'string' && fileContent.length > 0) {
                    await botInstance.sendDocument(chatId, Buffer.from(fileContent), {}, {
                        filename: `${config.userGivenName.replace(/\s+/g, '_')}.conf`,
                        contentType: 'text/plain'
                    });
                    logActivity(`User ${userId} downloaded config ${config.userGivenName} (ID: ${wgEasyClientId})`);
                } else {
                    logActivity(`Failed to get config file content for ${wgEasyClientId} in handleConfigAction (dl_config). Content: ${fileContent}`);
                    await botInstance.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.");
                }
                break;
            case 'qr_config':
                const qrBuffer = await wgAPI.getClientQrCodeSvg(wgEasyClientId);
                if (qrBuffer instanceof Buffer && qrBuffer.length > 0) {
                    logActivity(`Attempting to send QR code photo (PNG) for config ${wgEasyClientId}. Buffer length: ${qrBuffer.length}`);
                    await botInstance.sendPhoto(chatId, qrBuffer, {
                        caption: `QR-–∫–æ–¥ –¥–ª—è ${config.userGivenName}`
                    });
                    logActivity(`User ${userId} requested QR photo (PNG) for config ${config.userGivenName} (ID: ${wgEasyClientId})`);
                } else {
                    logActivity(`Failed to get QR code buffer for ${wgEasyClientId} in handleConfigAction (qr_config). Buffer: ${qrBuffer}`);
                    await botInstance.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥.");
                }
                break;
            case 'disable_config':
                if (await wgAPI.disableWgClient(wgEasyClientId)) {
                    user.configs[configIndex].isEnabled = false;
                    db.updateUser(userId, { configs: user.configs });
                    // await botInstance.answerCallbackQuery(chatId.toString(), { text: `–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è "${config.userGivenName}" –æ—Ç–∫–ª—é—á–µ–Ω–∞.` }); // callback_query_handler
                    logActivity(`User ${userId} disabled config ${config.userGivenName} (ID: ${wgEasyClientId})`);
                    await handleViewConfig(chatId, userId, wgEasyClientId);
                } else {
                    await botInstance.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.");
                }
                break;
            case 'enable_config':
                if (await wgAPI.enableWgClient(wgEasyClientId)) {
                    user.configs[configIndex].isEnabled = true;
                    db.updateUser(userId, { configs: user.configs });
                    // await botInstance.answerCallbackQuery(chatId.toString(), { text: `–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è "${config.userGivenName}" –≤–∫–ª—é—á–µ–Ω–∞.` }); // callback_query_handler
                    logActivity(`User ${userId} enabled config ${config.userGivenName} (ID: ${wgEasyClientId})`);
                    await handleViewConfig(chatId, userId, wgEasyClientId);
                } else {
                    await botInstance.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.");
                }
                break;
            case 'delete_config_ask':
                await botInstance.sendMessage(chatId, `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é "${config.userGivenName}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: "üóë –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data: `delete_config_confirm_${wgEasyClientId}` }],
                            [{ text: "‚¨ÖÔ∏è –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data: `view_config_${wgEasyClientId}` }]
                        ]
                    }
                });
                break;
            case 'delete_config_confirm':
                if (await wgAPI.deleteWgClient(wgEasyClientId)) {
                    user.configs.splice(configIndex, 1);
                    db.updateUser(userId, { configs: user.configs });
                    // await botInstance.answerCallbackQuery(chatId.toString(), { text: `–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è "${config.userGivenName}" —É–¥–∞–ª–µ–Ω–∞.` }); // callback_query_handler
                    await botInstance.sendMessage(chatId, `–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è "${config.userGivenName}" —É–¥–∞–ª–µ–Ω–∞.`);
                    logActivity(`User ${userId} deleted config ${config.userGivenName} (ID: ${wgEasyClientId})`);
                    await handleListMyConfigs(chatId, userId, 0);
                } else {
                    await botInstance.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.");
                }
                break;
        }
    } catch (error) {
        console.error(`Error processing config action ${action} for ${wgEasyClientId}:`, error);
        logActivity(`Error in config action ${action} for ${wgEasyClientId} by user ${userId}: ${error}`);
        await botInstance.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.");
    }
}

export async function handleVpnHelp(chatId: number) {
    const helpText = `–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–±–æ—Ç–æ–π VPN, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

1Ô∏è‚É£ **–ó–∞–º–µ–Ω–∏—Ç–µ Endpoint –≤ –≤–∞—à–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard.**
   –ù–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å \`Endpoint = \` –∏ –∑–∞–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å –Ω–∞:
   \`Endpoint = 83.217.213.118:51820\`

   *–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?*
   - **–ù–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ:** –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à \`.conf\` —Ñ–∞–π–ª –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ, –Ω–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É \`Endpoint\` –∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ \`=\`. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ VPN.
   - **–ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ (–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard):**
     - –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç—É–Ω–Ω–µ–ª—å (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é).
     - –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–±—ã—á–Ω–æ –∫–∞—Ä–∞–Ω–¥–∞—à ‚úèÔ∏è).
     - –í —Ä–∞–∑–¥–µ–ª–µ "–ò–ù–¢–ï–†–§–ï–ô–°" –∏–ª–∏ "PEERS" (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –≤–µ—Ä—Å–∏–∏) –Ω–∞–π–¥–∏—Ç–µ –ø–æ–ª–µ "–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞" –∏–ª–∏ "Endpoint".
     - –ò–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ –Ω–∞ \`83.217.213.118:51820\`.
     - –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞.

2Ô∏è‚É£ **–ï—Å–ª–∏ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã Endpoint VPN –≤–æ–æ–±—â–µ –ø–µ—Ä–µ—Å—Ç–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–æ–ø–∞–ª:**
   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–±—Ä–∞—Ç—å –≥–∞–ª–æ—á–∫—É "–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Ç—É–Ω–Ω–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫" (Kill-switch).
   - **–ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ (–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard):**
     - –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç—É–Ω–Ω–µ–ª—å (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é).
     - –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–±—ã—á–Ω–æ –∫–∞—Ä–∞–Ω–¥–∞—à ‚úèÔ∏è).
     - –ù–∞–π–¥–∏—Ç–µ –æ–ø—Ü–∏—é "–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Ç—É–Ω–Ω–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫" (–º–æ–∂–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è "Kill-switch" –∏–ª–∏ –ø–æ—Ö–æ–∂–µ).
     - –°–Ω–∏–º–∏—Ç–µ —Å –Ω–µ–µ –≥–∞–ª–æ—á–∫—É.
     - –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.
   *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –≠—Ç–∞ –æ–ø—Ü–∏—è –ø–æ–≤—ã—à–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –Ω–æ –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π Endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.

–ï—Å–ª–∏ —ç—Ç–∏ —à–∞–≥–∏ –Ω–µ –ø–æ–º–æ–≥–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;

    await botInstance.sendMessage(chatId, helpText, {
        parse_mode: "Markdown",
        reply_markup: {
            inline_keyboard: [
                [{ text: "‚úçÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data: "request_feedback" }]
            ]
        }
    });
}

export async function handleRequestFeedback(chatId: number, userId: number) {
    db.updateUser(userId, { state: { action: 'awaiting_feedback' } });
    await botInstance.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.");
}

export async function handleFeedbackInput(msg: TelegramBot.Message) {
    const chatId = msg.chat.id;
    const userId = msg.from!.id;
    const feedbackText = msg.text;
    const user = db.getUser(userId);

    if (!user || !user.state || user.state.action !== 'awaiting_feedback') return;

    const userContact = msg.from?.username ? `@${msg.from.username}` : `User ID: ${userId} (–ò–º—è: ${msg.from?.first_name || ''} ${msg.from?.last_name || ''})`.trim();
    const messageToAdmin = `üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userContact}:\n\n"${feedbackText}"`;

    try {
        await botInstance.sendMessage(appConfigInstance.adminTelegramId, messageToAdmin);
        await botInstance.sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
        logActivity(`User ${userId} sent feedback: "${feedbackText}"`);
    } catch (error) {
        logActivity(`Failed to send feedback from ${userId} to admin: ${error}`);
        await botInstance.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    } finally {
        db.updateUser(userId, { state: undefined });
    }
}
