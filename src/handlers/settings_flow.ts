import TelegramBot, { InlineKeyboardButton } from 'node-telegram-bot-api';
import { findCity, CityData } from '$/utils/timezone';
import * as db from '$/db/index';


let botInstance: TelegramBot;

export function initSettingsFlow(bot: TelegramBot) {
    botInstance = bot;
}

export async function handlePersonalSettings(chatId: number, userId: number, messageId: number) {
    const user = db.getUser(userId);
    if (!user) return;
    
    db.updateUser(userId, { state: undefined });
    
    const inline_keyboard: InlineKeyboardButton[][] = [
        [{ text: "üåÜ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC+" + user.settings.utc, callback_data: `set_timezone` }],
        [{ text: "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: `user_main_menu` }],
    ]
    
    const caption = "‚öô <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>"
    + "\n–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.";
    
    // TODO fix
    // @ts-ignore
    await botInstance.sendCachedMedia(chatId, messageId, {
        media: "empty.png",
        uniqueKey: 'empty',
        expiresIn: 999999999,
        caption,
        keyboard: inline_keyboard
    })
}

const handleTimezonesDefaultKeyboard: InlineKeyboardButton[][] = [
    [
        { text: "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data: `personal_settings` },
    ]
]

export async function handleSetTimezoneStart(chatId: number, userId: number, messageId: number) {
    const user = db.getUser(userId);
    if (!user) return;
    
    const caption = "‚öô <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</b>"
    + "\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫ –≤–∞–º –≥–æ—Ä–æ–¥–∞ - –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.";
    
    // @ts-ignore
    await botInstance.sendCachedMedia(chatId, messageId, {
        media: "empty.png",
        uniqueKey: 'empty',
        expiresIn: 999999999,
        caption,
        keyboard: handleTimezonesDefaultKeyboard
    })
    
    db.updateUser(userId, { state: { action: 'set_timezone', messageId } });
}

export async function handleSetTimezone(userId: number, text: string) {
    const user = db.getUser(userId);
    if (!user || !user.state) return;
    
    const city: CityData | undefined = findCity(text);
    
    if (city === undefined) {
        botInstance.editMessageText("‚úÖ <i>–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ</i>", {
            message_id: user.state.messageId,
            chat_id: userId,
        })
        
        const reply = await botInstance.sendMessage(userId, "‚öô <b>–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>"
        + "\n–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ–ø–µ—á–∞—Ç–∫—É?", {
            parse_mode: 'HTML',
            reply_markup: { inline_keyboard: handleTimezonesDefaultKeyboard }
        });
        
        db.updateUser(userId, { state: { action: 'set_timezone', messageId: reply.message_id } });
        return;
    }
    
    await botInstance.sendMessage(userId, `‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ <b>UTC+${city.utc}</b>`, { parse_mode: 'HTML' });
    
    db.updateUser(userId, { settings: { ...user.settings, city: city.name, utc: city.utc } });
    
    handlePersonalSettings(userId, userId, NaN); // TODO change first userId to chatId?
}

export default {
	handlePersonalSettings,
	handleSetTimezoneStart,
	handleSetTimezone,
}
